import fs from "fs-extra";
import path from "path";
import chalk from "chalk";

export async function createBaseStructure(targetDir: string): Promise<void> {
    console.log(chalk.blue(`Creating base structure at: ${targetDir}`));

    // Create main directories
    const directories = [
        targetDir,
        path.join(targetDir, "tokens"),
        path.join(targetDir, "wallets"),
        path.join(targetDir, "systems"),
        path.join(targetDir, "types"),
        path.join(targetDir, "utils"),
        path.join(targetDir, "constants"),
    ];

    for (const dir of directories) {
        await fs.ensureDir(dir);
        console.log(chalk.green(`✓ Created directory: ${path.relative(process.cwd(), dir)}`));
    }

    // Create base types file
    await createTypesFile(targetDir);

    // Create utility files
    await createUtilsFiles(targetDir);

    // Create constants file
    await createConstantsFile(targetDir);

    // Create index exports
    await createIndexFiles(targetDir);
}

async function createTypesFile(targetDir: string): Promise<void> {
    const typesContent = `export type ComponentProps = {
  className?: string;
  size?: number;        // For square icons, applies to both width and height
  width?: number;       // Specific width (overrides size)
  height?: number;      // Specific height (overrides size)
  alt?: string;
};

export type IconUrls = {
  lightMode: string;
  darkMode: string;
};

// This will be populated as you add tokens
export enum TokenName {
  // Example: BTC = "BTC"
}

// This will be populated as you add wallets  
export enum WalletName {
  // Example: MetaMask = "MetaMask"
}

// This will be populated as you add systems
export enum SystemName {
  // Example: Ethereum = "Ethereum"
}
`;

    const typesFile = path.join(targetDir, "types", "index.ts");
    await fs.writeFile(typesFile, typesContent);
    console.log(chalk.green(`✓ Created types file: ${path.relative(process.cwd(), typesFile)}`));
}

async function createUtilsFiles(targetDir: string): Promise<void> {
    const utilsContent = `import { useTheme } from "next-themes";

export function useIsDarkMode(): boolean {
  const { theme, systemTheme } = useTheme();
  return theme === 'dark' || (theme === 'system' && systemTheme === 'dark');
}

export function getImageSrc(lightMode: string, darkMode: string, isDark: boolean): string {
  return isDark ? darkMode : lightMode;
}
`;

    const utilsFile = path.join(targetDir, "utils", "theme.ts");
    await fs.writeFile(utilsFile, utilsContent);
    console.log(chalk.green(`✓ Created utils file: ${path.relative(process.cwd(), utilsFile)}`));
}

async function createConstantsFile(targetDir: string): Promise<void> {
    const constantsContent = `// Image path constants - auto-generated by CLI
export type ImagePaths = {
  lightMode: string;
  darkMode: string;
};

// Token image paths will be added here
// Example: export const TOKEN_BTC: ImagePaths = { lightMode: "...", darkMode: "..." };

// Wallet image paths will be added here  
// Example: export const WALLET_MetaMask: ImagePaths = { lightMode: "...", darkMode: "..." };

// System image paths will be added here
// Example: export const SYSTEM_Ethereum: ImagePaths = { lightMode: "...", darkMode: "..." };
`;

    const constantsFile = path.join(targetDir, "constants", "imagePaths.ts");
    await fs.writeFile(constantsFile, constantsContent);
    console.log(chalk.green(`✓ Created constants file: ${path.relative(process.cwd(), constantsFile)}`));
}

async function createIndexFiles(targetDir: string): Promise<void> {
    const indexFiles = [
        { path: path.join(targetDir, "tokens", "index.ts"), content: "// Token exports will be added here\n" },
        { path: path.join(targetDir, "wallets", "index.ts"), content: "// Wallet exports will be added here\n" },
        { path: path.join(targetDir, "systems", "index.ts"), content: "// System exports will be added here\n" },
        {
            path: path.join(targetDir, "index.ts"),
            content: `export * from './tokens';
export * from './wallets';
export * from './systems';
export * from './types';
`,
        },
    ];

    for (const file of indexFiles) {
        await fs.writeFile(file.path, file.content);
        console.log(chalk.green(`✓ Created index file: ${path.relative(process.cwd(), file.path)}`));
    }
}
